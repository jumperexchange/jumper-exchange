name: Build Docker

on:
  push:
    branches:
      - feat/gsm-config-update
      # - develop
      # - staging
      # - main

env:
  IMAGE_NAME: europe-docker.pkg.dev/jumper-g-artifacts/docker-jumper-exchange/jumpex
  PROJECT_ID: jumper-g-management
  GCP_REGION: europe-west1

jobs:
  retrieve-secrets:
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Environment Variables
        id: set-env
        run: |         
          if [[ $GITHUB_REF == 'refs/heads/develop' ]]; then
            echo "GCP_ENV_PROJECT=jumper-d-dev" >> "$GITHUB_ENV"
          elif [[ $GITHUB_REF == 'refs/heads/staging' ]]; then
            echo "GCP_ENV_PROJECT=jumper-s-staging" >> "$GITHUB_ENV"
          elif [[ $GITHUB_REF == 'refs/heads/main' ]]; then
            echo "GCP_ENV_PROJECT=jumper-p-prod" >> "$GITHUB_ENV"
          else
            echo "GCP_ENV_PROJECT=jumper-d-dev" >> "$GITHUB_ENV"
          fi

      - name: Debug Environment
        run: |
          echo "Current branch: $GITHUB_REF"
          echo "Selected project: ${{ env.GCP_ENV_PROJECT }}"

      - name: Authenticate to Google Cloud
        id: gcpauth
        uses: google-github-actions/auth@v2
        with:
          token_format: 'access_token'
          create_credentials_file: true
          workload_identity_provider: 'projects/800848389157/locations/global/workloadIdentityPools/github/providers/github'
          service_account: 'artifact-deployer-secret@jumper-g-management.iam.gserviceaccount.com'

      - name: Get and Save Secret
        id: save-secret
        run: |
          # Get the secret
          SECRET_CONTENT=$(gcloud secrets versions access latest \
            --secret="jumper-exchange-env" \
            --project="${{ env.GCP_ENV_PROJECT }}")
          
          # Save to temporary file
          echo "$SECRET_CONTENT" > temp_env
          
          # Create base64 encoded content
          ENCODED_CONTENT=$(base64 -w 0 < temp_env)
          
          # Set output
          echo "env_content=$ENCODED_CONTENT" >> "$GITHUB_OUTPUT"
          
          # Cleanup
          rm temp_env
          
          # Debug (don't show content)
          echo "Secret retrieved and encoded. Length: ${SECRET_CONTENT}"

  build-docker:
    needs: retrieve-secrets
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      id-token: "write"

    steps:
      # ... other steps ...

      - name: Create .env file
        run: |
          # Debug the received content length
          echo "Received encoded content length: ${#ENCODED_CONTENT}"
          
          # Decode and create .env file
          echo "${{ needs.retrieve-secrets.outputs.env_content }}" | base64 -d > .env
          
          # Verify file
          if [ -s .env ]; then
            echo "Successfully created .env file with $(wc -l < .env) lines"
            echo "File size: $(stat -f%z .env || stat -c%s .env) bytes"
          else
            echo "Error: .env file is empty or was not created properly"
            ls -la .env
            exit 1
          fi

      # Optional: Add artifact upload for debugging
      - name: Upload .env file for debugging
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: env-file
          path: .env