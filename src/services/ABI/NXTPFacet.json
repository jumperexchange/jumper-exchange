{
  "address": "0x6eB47cEDccB8Ba808eA15112ba1e7eB8E480806D",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "bytes32", "name": "transactionId", "type": "bytes32" },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receivingAssetId",
          "type": "address"
        },
        { "indexed": false, "internalType": "address", "name": "receiver", "type": "address" },
        { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" },
        { "indexed": false, "internalType": "uint256", "name": "timestamp", "type": "uint256" }
      ],
      "name": "LiFiTransferCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "bytes32", "name": "transactionId", "type": "bytes32" },
        { "indexed": false, "internalType": "string", "name": "integrator", "type": "string" },
        { "indexed": false, "internalType": "address", "name": "referrer", "type": "address" },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sendingAssetId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receivingAssetId",
          "type": "address"
        },
        { "indexed": false, "internalType": "address", "name": "receiver", "type": "address" },
        { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "destinationChainId",
          "type": "uint256"
        },
        { "indexed": false, "internalType": "uint256", "name": "timestamp", "type": "uint256" }
      ],
      "name": "LiFiTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "lifiTransactionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "nxtpTransactionId",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "receivingChainTxManagerAddress",
              "type": "address"
            },
            { "internalType": "address", "name": "user", "type": "address" },
            { "internalType": "address", "name": "router", "type": "address" },
            { "internalType": "address", "name": "initiator", "type": "address" },
            { "internalType": "address", "name": "sendingAssetId", "type": "address" },
            { "internalType": "address", "name": "receivingAssetId", "type": "address" },
            { "internalType": "address", "name": "sendingChainFallback", "type": "address" },
            { "internalType": "address", "name": "receivingAddress", "type": "address" },
            { "internalType": "address", "name": "callTo", "type": "address" },
            { "internalType": "bytes32", "name": "callDataHash", "type": "bytes32" },
            { "internalType": "bytes32", "name": "transactionId", "type": "bytes32" },
            { "internalType": "uint256", "name": "sendingChainId", "type": "uint256" },
            { "internalType": "uint256", "name": "receivingChainId", "type": "uint256" },
            { "internalType": "uint256", "name": "amount", "type": "uint256" },
            { "internalType": "uint256", "name": "expiry", "type": "uint256" },
            { "internalType": "uint256", "name": "preparedBlockNumber", "type": "uint256" }
          ],
          "indexed": false,
          "internalType": "struct ITransactionManager.TransactionData",
          "name": "txData",
          "type": "tuple"
        }
      ],
      "name": "NXTPBridgeStarted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            { "internalType": "bytes32", "name": "transactionId", "type": "bytes32" },
            { "internalType": "string", "name": "integrator", "type": "string" },
            { "internalType": "address", "name": "referrer", "type": "address" },
            { "internalType": "address", "name": "sendingAssetId", "type": "address" },
            { "internalType": "address", "name": "receivingAssetId", "type": "address" },
            { "internalType": "address", "name": "receiver", "type": "address" },
            { "internalType": "uint256", "name": "destinationChainId", "type": "uint256" },
            { "internalType": "uint256", "name": "amount", "type": "uint256" }
          ],
          "internalType": "struct ILiFi.LiFiData",
          "name": "_lifiData",
          "type": "tuple"
        },
        { "internalType": "address", "name": "assetId", "type": "address" },
        { "internalType": "address", "name": "receiver", "type": "address" },
        { "internalType": "uint256", "name": "amount", "type": "uint256" }
      ],
      "name": "completeBridgeTokensViaNXTP",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNXTPTransactionManager",
      "outputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            { "internalType": "bytes32", "name": "transactionId", "type": "bytes32" },
            { "internalType": "string", "name": "integrator", "type": "string" },
            { "internalType": "address", "name": "referrer", "type": "address" },
            { "internalType": "address", "name": "sendingAssetId", "type": "address" },
            { "internalType": "address", "name": "receivingAssetId", "type": "address" },
            { "internalType": "address", "name": "receiver", "type": "address" },
            { "internalType": "uint256", "name": "destinationChainId", "type": "uint256" },
            { "internalType": "uint256", "name": "amount", "type": "uint256" }
          ],
          "internalType": "struct ILiFi.LiFiData",
          "name": "_lifiData",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "receivingChainTxManagerAddress",
                  "type": "address"
                },
                { "internalType": "address", "name": "user", "type": "address" },
                { "internalType": "address", "name": "router", "type": "address" },
                { "internalType": "address", "name": "initiator", "type": "address" },
                { "internalType": "address", "name": "sendingAssetId", "type": "address" },
                { "internalType": "address", "name": "receivingAssetId", "type": "address" },
                { "internalType": "address", "name": "sendingChainFallback", "type": "address" },
                { "internalType": "address", "name": "receivingAddress", "type": "address" },
                { "internalType": "address", "name": "callTo", "type": "address" },
                { "internalType": "uint256", "name": "sendingChainId", "type": "uint256" },
                { "internalType": "uint256", "name": "receivingChainId", "type": "uint256" },
                { "internalType": "bytes32", "name": "callDataHash", "type": "bytes32" },
                { "internalType": "bytes32", "name": "transactionId", "type": "bytes32" }
              ],
              "internalType": "struct ITransactionManager.InvariantTransactionData",
              "name": "invariantData",
              "type": "tuple"
            },
            { "internalType": "uint256", "name": "amount", "type": "uint256" },
            { "internalType": "uint256", "name": "expiry", "type": "uint256" },
            { "internalType": "bytes", "name": "encryptedCallData", "type": "bytes" },
            { "internalType": "bytes", "name": "encodedBid", "type": "bytes" },
            { "internalType": "bytes", "name": "bidSignature", "type": "bytes" },
            { "internalType": "bytes", "name": "encodedMeta", "type": "bytes" }
          ],
          "internalType": "struct ITransactionManager.PrepareArgs",
          "name": "_nxtpData",
          "type": "tuple"
        }
      ],
      "name": "startBridgeTokensViaNXTP",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            { "internalType": "bytes32", "name": "transactionId", "type": "bytes32" },
            { "internalType": "string", "name": "integrator", "type": "string" },
            { "internalType": "address", "name": "referrer", "type": "address" },
            { "internalType": "address", "name": "sendingAssetId", "type": "address" },
            { "internalType": "address", "name": "receivingAssetId", "type": "address" },
            { "internalType": "address", "name": "receiver", "type": "address" },
            { "internalType": "uint256", "name": "destinationChainId", "type": "uint256" },
            { "internalType": "uint256", "name": "amount", "type": "uint256" }
          ],
          "internalType": "struct ILiFi.LiFiData",
          "name": "_lifiData",
          "type": "tuple"
        },
        {
          "components": [
            { "internalType": "address", "name": "callTo", "type": "address" },
            { "internalType": "address", "name": "sendingAssetId", "type": "address" },
            { "internalType": "address", "name": "receivingAssetId", "type": "address" },
            { "internalType": "uint256", "name": "fromAmount", "type": "uint256" },
            { "internalType": "bytes", "name": "callData", "type": "bytes" }
          ],
          "internalType": "struct LibSwap.SwapData[]",
          "name": "_swapData",
          "type": "tuple[]"
        },
        { "internalType": "address", "name": "finalAssetId", "type": "address" },
        { "internalType": "address", "name": "receiver", "type": "address" }
      ],
      "name": "swapAndCompleteBridgeTokensViaNXTP",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            { "internalType": "bytes32", "name": "transactionId", "type": "bytes32" },
            { "internalType": "string", "name": "integrator", "type": "string" },
            { "internalType": "address", "name": "referrer", "type": "address" },
            { "internalType": "address", "name": "sendingAssetId", "type": "address" },
            { "internalType": "address", "name": "receivingAssetId", "type": "address" },
            { "internalType": "address", "name": "receiver", "type": "address" },
            { "internalType": "uint256", "name": "destinationChainId", "type": "uint256" },
            { "internalType": "uint256", "name": "amount", "type": "uint256" }
          ],
          "internalType": "struct ILiFi.LiFiData",
          "name": "_lifiData",
          "type": "tuple"
        },
        {
          "components": [
            { "internalType": "address", "name": "callTo", "type": "address" },
            { "internalType": "address", "name": "sendingAssetId", "type": "address" },
            { "internalType": "address", "name": "receivingAssetId", "type": "address" },
            { "internalType": "uint256", "name": "fromAmount", "type": "uint256" },
            { "internalType": "bytes", "name": "callData", "type": "bytes" }
          ],
          "internalType": "struct LibSwap.SwapData[]",
          "name": "_swapData",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "receivingChainTxManagerAddress",
                  "type": "address"
                },
                { "internalType": "address", "name": "user", "type": "address" },
                { "internalType": "address", "name": "router", "type": "address" },
                { "internalType": "address", "name": "initiator", "type": "address" },
                { "internalType": "address", "name": "sendingAssetId", "type": "address" },
                { "internalType": "address", "name": "receivingAssetId", "type": "address" },
                { "internalType": "address", "name": "sendingChainFallback", "type": "address" },
                { "internalType": "address", "name": "receivingAddress", "type": "address" },
                { "internalType": "address", "name": "callTo", "type": "address" },
                { "internalType": "uint256", "name": "sendingChainId", "type": "uint256" },
                { "internalType": "uint256", "name": "receivingChainId", "type": "uint256" },
                { "internalType": "bytes32", "name": "callDataHash", "type": "bytes32" },
                { "internalType": "bytes32", "name": "transactionId", "type": "bytes32" }
              ],
              "internalType": "struct ITransactionManager.InvariantTransactionData",
              "name": "invariantData",
              "type": "tuple"
            },
            { "internalType": "uint256", "name": "amount", "type": "uint256" },
            { "internalType": "uint256", "name": "expiry", "type": "uint256" },
            { "internalType": "bytes", "name": "encryptedCallData", "type": "bytes" },
            { "internalType": "bytes", "name": "encodedBid", "type": "bytes" },
            { "internalType": "bytes", "name": "bidSignature", "type": "bytes" },
            { "internalType": "bytes", "name": "encodedMeta", "type": "bytes" }
          ],
          "internalType": "struct ITransactionManager.PrepareArgs",
          "name": "_nxtpData",
          "type": "tuple"
        }
      ],
      "name": "swapAndStartBridgeTokensViaNXTP",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2430654f2ebe22fb2d52ea47b291243e15070ee138af0fc1314878cb558d3eda",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x552008c0f6870c2f77e5cC1d2eb9bdff03e30Ea0",
    "contractAddress": null,
    "transactionIndex": 5,
    "gasUsed": "2328486",
    "logsBloom": "0x
    "blockHash": "0xbba0ff66fe903f3af41b9936ca01fa6bef120d09451b65b2ccc4f06c6d896b10",
    "transactionHash": "0x2430654f2ebe22fb2d52ea47b291243e15070ee138af0fc1314878cb558d3eda",
    "logs": [],
    "blockNumber": 5543256,
    "cumulativeGasUsed": "2640163",
    "status": 1,
    "byzantium": true
  },
  "args": ["0xD22dB9ad317A09384a86f310c973CDc350Bb510E"],
  "solcInputHash": "42dd3dced128e8ac8f9858c8bfe79127",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ITransactionManager\",\"name\":\"_txMgrAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"transactionId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"integrator\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LiFiTransferCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"transactionId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"integrator\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LiFiTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receivingChainTxManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preparedBlockNumber\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"txData\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encryptedCallData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encodedBid\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"bidSignature\",\"type\":\"bytes\"}],\"name\":\"NXTPBridgeStarted\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"transactionId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"integrator\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct ILiFi.LiFiData\",\"name\":\"_lifiData\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"completeBridgeTokensViaNXTP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNXTPTransactionManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"transactionId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"integrator\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct ILiFi.LiFiData\",\"name\":\"_lifiData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receivingChainTxManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"encryptedCallData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encodedBid\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bidSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"struct NXTPFacet.NXTPData\",\"name\":\"_nxtpData\",\"type\":\"tuple\"}],\"name\":\"startBridgeTokensViaNXTP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"transactionId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"integrator\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct ILiFi.LiFiData\",\"name\":\"_lifiData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct LibLiFi.SwapData[]\",\"name\":\"_swapData\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"finalAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"swapAndCompleteBridgeTokensViaNXTP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"transactionId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"integrator\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct ILiFi.LiFiData\",\"name\":\"_lifiData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct LibLiFi.SwapData[]\",\"name\":\"_swapData\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receivingChainTxManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"encryptedCallData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encodedBid\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bidSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"struct NXTPFacet.NXTPData\",\"name\":\"_nxtpData\",\"type\":\"tuple\"}],\"name\":\"swapAndStartBridgeTokensViaNXTP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"startBridgeTokensViaNXTP((string,string,address,uint256),(address,address,address,address,address,address,address,address,uint256,uint256,bytes32,bytes32,bytes,bytes,bytes,uint256,uint256))\":{\"params\":{\"_lifiData\":\"data used purely for tracking and analytics\",\"_nxtpData\":\"data needed to complete an NXTP cross-chain transaction\"}},\"swapAndStartBridgeTokensViaNXTP((string,string,address,uint256),(address,address,address,uint256,uint256,bytes)[],(address,address,address,address,address,address,address,address,uint256,uint256,bytes32,bytes32,bytes,bytes,bytes,uint256,uint256))\":{\"params\":{\"_lifiData\":\"data used purely for tracking and analytics\",\"_nxtpData\":\"data needed to complete an NXTP cross-chain transaction\",\"_swapData\":\"array of data needed for swaps\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"completeBridgeTokensViaNXTP((string,string,address,uint256),address,address,uint256)\":{\"notice\":\"This function completes a cross-chain transaction using the NXTP protocol.\"},\"getNXTPTransactionManager()\":{\"notice\":\"show the NXTP transaction manager contract address\"},\"startBridgeTokensViaNXTP((string,string,address,uint256),(address,address,address,address,address,address,address,address,uint256,uint256,bytes32,bytes32,bytes,bytes,bytes,uint256,uint256))\":{\"notice\":\"This function starts a cross-chain transaction using the NXTP protocol\"},\"swapAndStartBridgeTokensViaNXTP((string,string,address,uint256),(address,address,address,uint256,uint256,bytes)[],(address,address,address,address,address,address,address,address,uint256,uint256,bytes32,bytes32,bytes,bytes,bytes,uint256,uint256))\":{\"notice\":\"This function performs a swap or multiple swaps and then starts a cross-chain transaction         using the NXTP protocol.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Facets/NXTPFacet.sol\":\"NXTPFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"src/Facets/NXTPFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { ITransactionManager } from \\\"../Interfaces/ITransactionManager.sol\\\";\\nimport { ILiFi } from \\\"../Interfaces/ILiFi.sol\\\";\\nimport { LibAsset } from \\\"../Libraries/LibAsset.sol\\\";\\nimport { LibLiFi } from \\\"../Libraries/LibLiFi.sol\\\";\\n\\ncontract NXTPFacet is ILiFi {\\n    using SafeERC20 for IERC20;\\n\\n    ITransactionManager private immutable transactionManager;\\n\\n    event NXTPBridgeStarted(\\n        address indexed user,\\n        address indexed router,\\n        bytes32 indexed transactionId,\\n        ITransactionManager.TransactionData txData,\\n        address caller,\\n        bytes encryptedCallData,\\n        bytes encodedBid,\\n        bytes bidSignature\\n    );\\n\\n    constructor(ITransactionManager _txMgrAddr) {\\n        transactionManager = _txMgrAddr;\\n    }\\n\\n    struct NXTPData {\\n        address receivingChainTxManagerAddress;\\n        address user;\\n        address router;\\n        address sendingAssetId;\\n        address receivingAssetId;\\n        address sendingChainFallback; // funds sent here on cancel\\n        address receivingAddress;\\n        address callTo;\\n        uint256 sendingChainId;\\n        uint256 receivingChainId;\\n        bytes32 callDataHash; // hashed to prevent free option\\n        bytes32 transactionId;\\n        bytes encryptedCallData; // optional calldata\\n        bytes encodedBid; // bid from router\\n        bytes bidSignature; // router's sig on bid\\n        uint256 amount;\\n        uint256 expiry;\\n    }\\n\\n    /**\\n     * @notice This function starts a cross-chain transaction using the NXTP protocol\\n     * @param _lifiData data used purely for tracking and analytics\\n     * @param _nxtpData data needed to complete an NXTP cross-chain transaction\\n     */\\n    function startBridgeTokensViaNXTP(LiFiData memory _lifiData, NXTPData calldata _nxtpData) public payable {\\n        // Ensure sender has enough to complete the bridge transaction\\n        address fromToken = _nxtpData.sendingAssetId;\\n        if (_nxtpData.sendingAssetId == address(0)) require(msg.value == _nxtpData.amount, \\\"ERR_INVALID_AMOUNT\\\");\\n        else {\\n            uint256 _fromTokenBalance = LibAsset.getOwnBalance(fromToken);\\n            LibAsset.transferFromERC20(fromToken, msg.sender, address(this), _nxtpData.amount);\\n            require(LibAsset.getOwnBalance(fromToken) - _fromTokenBalance == _nxtpData.amount, \\\"ERR_INVALID_AMOUNT\\\");\\n        }\\n\\n        // Start the bridge process\\n        _startBridge(_nxtpData);\\n\\n        emit LiFiTransferStarted(\\n            _lifiData.transactionId,\\n            _lifiData.integrator,\\n            _lifiData.referrer,\\n            _lifiData.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @notice This function performs a swap or multiple swaps and then starts a cross-chain transaction\\n     *         using the NXTP protocol.\\n     * @param _lifiData data used purely for tracking and analytics\\n     * @param _swapData array of data needed for swaps\\n     * @param _nxtpData data needed to complete an NXTP cross-chain transaction\\n     */\\n    function swapAndStartBridgeTokensViaNXTP(\\n        LiFiData memory _lifiData,\\n        LibLiFi.SwapData[] calldata _swapData,\\n        NXTPData calldata _nxtpData\\n    ) public payable {\\n        address fromToken = _nxtpData.sendingAssetId;\\n        uint256 _fromTokenBalance = LibAsset.getOwnBalance(fromToken);\\n\\n        // Swap\\n        for (uint8 i; i < _swapData.length; i++) {\\n            LibLiFi.swap(_swapData[i]);\\n        }\\n\\n        require(LibAsset.getOwnBalance(fromToken) - _fromTokenBalance == _nxtpData.amount, \\\"ERR_INVALID_AMOUNT\\\");\\n\\n        _startBridge(_nxtpData);\\n\\n        emit LiFiTransferStarted(\\n            _lifiData.transactionId,\\n            _lifiData.integrator,\\n            _lifiData.referrer,\\n            _lifiData.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @notice This function completes a cross-chain transaction using the NXTP protocol.\\n     */\\n    function completeBridgeTokensViaNXTP(\\n        LiFiData memory _lifiData,\\n        address assetId,\\n        address recipient,\\n        uint256 amount\\n    ) public payable {\\n        if (LibAsset.isNativeAsset(assetId)) {\\n            require(msg.value == amount, \\\"INVALID_ETH_AMOUNT\\\");\\n        } else {\\n            require(msg.value == 0, \\\"ETH_WITH_ERC\\\");\\n            LibAsset.transferFromERC20(assetId, msg.sender, address(this), amount);\\n        }\\n\\n        LibAsset.transferAsset(assetId, payable(recipient), amount);\\n\\n        emit LiFiTransferCompleted(\\n            _lifiData.transactionId,\\n            _lifiData.integrator,\\n            _lifiData.referrer,\\n            _lifiData.timestamp\\n        );\\n    }\\n\\n    function swapAndCompleteBridgeTokensViaNXTP(\\n        LiFiData memory _lifiData,\\n        LibLiFi.SwapData[] calldata _swapData,\\n        address finalAssetId,\\n        address recipient\\n    ) public payable {\\n        uint256 startingBalance = LibAsset.getOwnBalance(finalAssetId);\\n\\n        for (uint8 i; i < _swapData.length; i++) {\\n            LibLiFi.swap(_swapData[i]);\\n        }\\n\\n        uint256 postSwapBalance = LibAsset.getOwnBalance(finalAssetId);\\n\\n        uint256 finalBalance;\\n\\n        if (postSwapBalance > startingBalance) {\\n            finalBalance = postSwapBalance - startingBalance;\\n            LibAsset.transferAsset(finalAssetId, payable(recipient), finalBalance);\\n        }\\n\\n        emit LiFiTransferCompleted(\\n            _lifiData.transactionId,\\n            _lifiData.integrator,\\n            _lifiData.referrer,\\n            _lifiData.timestamp\\n        );\\n    }\\n\\n    function _startBridge(NXTPData calldata _nxtpData) internal {\\n        IERC20 fromToken = IERC20(_nxtpData.sendingAssetId);\\n\\n        // Give Connext approval to bridge tokens\\n        LibAsset.approveERC20(IERC20(fromToken), address(transactionManager), _nxtpData.amount);\\n\\n        uint256 value = LibAsset.isNativeAsset(_nxtpData.sendingAssetId) ? msg.value : 0;\\n\\n        // Initiate bridge transaction on sending chain\\n        ITransactionManager.TransactionData memory result = transactionManager.prepare{ value: value }(\\n            ITransactionManager.InvariantTransactionData(\\n                _nxtpData.receivingChainTxManagerAddress,\\n                _nxtpData.user,\\n                _nxtpData.router,\\n                _nxtpData.sendingAssetId,\\n                _nxtpData.receivingAssetId,\\n                _nxtpData.sendingChainFallback,\\n                _nxtpData.receivingAddress,\\n                _nxtpData.callTo,\\n                _nxtpData.sendingChainId,\\n                _nxtpData.receivingChainId,\\n                _nxtpData.callDataHash,\\n                _nxtpData.transactionId\\n            ),\\n            _nxtpData.amount,\\n            _nxtpData.expiry,\\n            _nxtpData.encryptedCallData,\\n            _nxtpData.encodedBid,\\n            _nxtpData.bidSignature\\n        );\\n\\n        emit NXTPBridgeStarted(\\n            result.user,\\n            result.router,\\n            result.transactionId,\\n            result,\\n            msg.sender,\\n            _nxtpData.encryptedCallData,\\n            _nxtpData.encodedBid,\\n            _nxtpData.bidSignature\\n        );\\n    }\\n\\n    /**\\n     * @notice show the NXTP transaction manager contract address\\n     */\\n    function getNXTPTransactionManager() external view returns (address) {\\n        return address(transactionManager);\\n    }\\n}\\n\",\"keccak256\":\"0x4871e43af9a82e82768772a1ab22253c9224a4acbdbe39d34792c9571d59bb08\",\"license\":\"MIT\"},\"src/Interfaces/ILiFi.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface ILiFi {\\n    struct LiFiData {\\n        string transactionId;\\n        string integrator;\\n        address referrer;\\n        uint256 timestamp;\\n    }\\n\\n    event LiFiTransferStarted(string indexed transactionId, string integrator, address referrer, uint256 timestamp);\\n    event LiFiTransferCompleted(string indexed transactionId, string integrator, address referrer, uint256 timestamp);\\n}\\n\",\"keccak256\":\"0x4acde9cc11610e7efb4a82d196d27d318f187d705d4bf86d88d2cd8e2e2248e6\",\"license\":\"MIT\"},\"src/Interfaces/ITransactionManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.7;\\n\\ninterface ITransactionManager {\\n    // Structs\\n\\n    // Holds all data that is constant between sending and\\n    // receiving chains. The hash of this is what gets signed\\n    // to ensure the signature can be used on both chains.\\n    struct InvariantTransactionData {\\n        address receivingChainTxManagerAddress;\\n        address user;\\n        address router;\\n        address sendingAssetId;\\n        address receivingAssetId;\\n        address sendingChainFallback; // funds sent here on cancel\\n        address receivingAddress;\\n        address callTo;\\n        uint256 sendingChainId;\\n        uint256 receivingChainId;\\n        bytes32 callDataHash; // hashed to prevent free option\\n        bytes32 transactionId;\\n    }\\n\\n    // Holds all data that varies between sending and receiving\\n    // chains. The hash of this is stored onchain to ensure the\\n    // information passed in is valid.\\n    struct VariantTransactionData {\\n        uint256 amount;\\n        uint256 expiry;\\n        uint256 preparedBlockNumber;\\n    }\\n\\n    // All Transaction data, constant and variable\\n    struct TransactionData {\\n        address receivingChainTxManagerAddress;\\n        address user;\\n        address router;\\n        address sendingAssetId;\\n        address receivingAssetId;\\n        address sendingChainFallback;\\n        address receivingAddress;\\n        address callTo;\\n        bytes32 callDataHash;\\n        bytes32 transactionId;\\n        uint256 sendingChainId;\\n        uint256 receivingChainId;\\n        uint256 amount;\\n        uint256 expiry;\\n        uint256 preparedBlockNumber; // Needed for removal of active blocks on fulfill/cancel\\n    }\\n\\n    // The structure of the signed data for fulfill\\n    struct SignedFulfillData {\\n        bytes32 transactionId;\\n        uint256 relayerFee;\\n        string functionIdentifier; // \\\"fulfill\\\" or \\\"cancel\\\"\\n        uint256 receivingChainId; // For domain separation\\n        address receivingChainTxManagerAddress; // For domain separation\\n    }\\n\\n    // The structure of the signed data for cancellation\\n    struct SignedCancelData {\\n        bytes32 transactionId;\\n        string functionIdentifier;\\n        uint256 receivingChainId;\\n        address receivingChainTxManagerAddress; // For domain separation\\n    }\\n\\n    // Adding/removing asset events\\n    event RouterAdded(address indexed addedRouter, address indexed caller);\\n\\n    event RouterRemoved(address indexed removedRouter, address indexed caller);\\n\\n    // Adding/removing router events\\n    event AssetAdded(address indexed addedAssetId, address indexed caller);\\n\\n    event AssetRemoved(address indexed removedAssetId, address indexed caller);\\n\\n    // Liquidity events\\n    event LiquidityAdded(address indexed router, address indexed assetId, uint256 amount, address caller);\\n\\n    event LiquidityRemoved(address indexed router, address indexed assetId, uint256 amount, address recipient);\\n\\n    // Transaction events\\n    event TransactionPrepared(\\n        address indexed user,\\n        address indexed router,\\n        bytes32 indexed transactionId,\\n        TransactionData txData,\\n        address caller,\\n        bytes encryptedCallData,\\n        bytes encodedBid,\\n        bytes bidSignature\\n    );\\n\\n    event TransactionFulfilled(\\n        address indexed user,\\n        address indexed router,\\n        bytes32 indexed transactionId,\\n        TransactionData txData,\\n        uint256 relayerFee,\\n        bytes signature,\\n        bytes callData,\\n        bool success,\\n        bytes returnData,\\n        address caller\\n    );\\n\\n    event TransactionCancelled(\\n        address indexed user,\\n        address indexed router,\\n        bytes32 indexed transactionId,\\n        TransactionData txData,\\n        address caller\\n    );\\n\\n    // Getters\\n    function getChainId() external view returns (uint256);\\n\\n    function getStoredChainId() external view returns (uint256);\\n\\n    // Owner only methods\\n    function addRouter(address router) external;\\n\\n    function removeRouter(address router) external;\\n\\n    function addAssetId(address assetId) external;\\n\\n    function removeAssetId(address assetId) external;\\n\\n    // Router only methods\\n    function addLiquidityFor(\\n        uint256 amount,\\n        address assetId,\\n        address router\\n    ) external payable;\\n\\n    function addLiquidity(uint256 amount, address assetId) external payable;\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        address assetId,\\n        address payable recipient\\n    ) external;\\n\\n    // Methods for crosschain transfers\\n    // called in the following order (in happy case)\\n    // 1. prepare by user on sending chain\\n    // 2. prepare by router on receiving chain\\n    // 3. fulfill by user on receiving chain\\n    // 4. fulfill by router on sending chain\\n    function prepare(\\n        InvariantTransactionData calldata txData,\\n        uint256 amount,\\n        uint256 expiry,\\n        bytes calldata encryptedCallData,\\n        bytes calldata encodedBid,\\n        bytes calldata bidSignature\\n    ) external payable returns (TransactionData memory);\\n\\n    function fulfill(\\n        TransactionData calldata txData,\\n        uint256 relayerFee,\\n        bytes calldata signature,\\n        bytes calldata callData\\n    ) external returns (TransactionData memory);\\n\\n    function cancel(TransactionData calldata txData, bytes calldata signature)\\n        external\\n        returns (TransactionData memory);\\n}\\n\",\"keccak256\":\"0x855c9497e59dec04444c8b61466885f6ab6eab533814b1f1b386ba17f9d23e89\",\"license\":\"UNLICENSED\"},\"src/Libraries/LibAsset.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title LibAsset\\n * @author Connext <support@connext.network>\\n * @notice This library contains helpers for dealing with onchain transfers\\n *         of assets, including accounting for the native asset `assetId`\\n *         conventions and any noncompliant ERC20 transfers\\n */\\nlibrary LibAsset {\\n    /**\\n     * @dev All native assets use the empty address for their asset id\\n     *      by convention\\n     */\\n    address internal constant NATIVE_ASSETID = address(0);\\n\\n    /**\\n     * @notice Determines whether the given assetId is the native asset\\n     * @param assetId The asset identifier to evaluate\\n     * @return Boolean indicating if the asset is the native asset\\n     */\\n    function isNativeAsset(address assetId) internal pure returns (bool) {\\n        return assetId == NATIVE_ASSETID;\\n    }\\n\\n    /**\\n     * @notice Gets the balance of the inheriting contract for the given asset\\n     * @param assetId The asset identifier to get the balance of\\n     * @return Balance held by contracts using this library\\n     */\\n    function getOwnBalance(address assetId) internal view returns (uint256) {\\n        return isNativeAsset(assetId) ? address(this).balance : IERC20(assetId).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice Transfers ether from the inheriting contract to a given\\n     *         recipient\\n     * @param recipient Address to send ether to\\n     * @param amount Amount to send to given recipient\\n     */\\n    function transferNativeAsset(address payable recipient, uint256 amount) internal {\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"#TNA:028\\\");\\n    }\\n\\n    /**\\n     * @notice Gives approval for another address to spend tokens\\n     * @param assetId Token address to transfer\\n     * @param spender Address to give spend approval to\\n     * @param amount Amount to approve for spending\\n     */\\n    function approveERC20(\\n        IERC20 assetId,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        if (isNativeAsset(address(assetId))) return;\\n\\n        uint256 allowance = assetId.allowance(address(this), spender);\\n        if (allowance > 0) SafeERC20.safeApprove(IERC20(assetId), spender, 0);\\n        SafeERC20.safeIncreaseAllowance(IERC20(assetId), spender, amount);\\n    }\\n\\n    /**\\n     * @notice Transfers tokens from the inheriting contract to a given\\n     *         recipient\\n     * @param assetId Token address to transfer\\n     * @param recipient Address to send ether to\\n     * @param amount Amount to send to given recipient\\n     */\\n    function transferERC20(\\n        address assetId,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        SafeERC20.safeTransfer(IERC20(assetId), recipient, amount);\\n    }\\n\\n    /**\\n     * @notice Transfers tokens from a sender to a given recipient\\n     * @param assetId Token address to transfer\\n     * @param from Address of sender/owner\\n     * @param to Address of recipient/spender\\n     * @param amount Amount to transfer from owner to spender\\n     */\\n    function transferFromERC20(\\n        address assetId,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        SafeERC20.safeTransferFrom(IERC20(assetId), from, to, amount);\\n    }\\n\\n    /**\\n     * @notice Increases the allowance of a token to a spender\\n     * @param assetId Token address of asset to increase allowance of\\n     * @param spender Account whos allowance is increased\\n     * @param amount Amount to increase allowance by\\n     */\\n    function increaseERC20Allowance(\\n        address assetId,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        require(!isNativeAsset(assetId), \\\"#IA:034\\\");\\n        SafeERC20.safeIncreaseAllowance(IERC20(assetId), spender, amount);\\n    }\\n\\n    /**\\n     * @notice Decreases the allowance of a token to a spender\\n     * @param assetId Token address of asset to decrease allowance of\\n     * @param spender Account whos allowance is decreased\\n     * @param amount Amount to decrease allowance by\\n     */\\n    function decreaseERC20Allowance(\\n        address assetId,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        require(!isNativeAsset(assetId), \\\"#DA:034\\\");\\n        SafeERC20.safeDecreaseAllowance(IERC20(assetId), spender, amount);\\n    }\\n\\n    /**\\n     * @notice Wrapper function to transfer a given asset (native or erc20) to\\n     *         some recipient. Should handle all non-compliant return value\\n     *         tokens as well by using the SafeERC20 contract by open zeppelin.\\n     * @param assetId Asset id for transfer (address(0) for native asset,\\n     *                token address for erc20s)\\n     * @param recipient Address to send asset to\\n     * @param amount Amount to send to given recipient\\n     */\\n    function transferAsset(\\n        address assetId,\\n        address payable recipient,\\n        uint256 amount\\n    ) internal {\\n        isNativeAsset(assetId) ? transferNativeAsset(recipient, amount) : transferERC20(assetId, recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x65aad5e9e1acc64e9b4fe1faefe91af550f816e0015cfdd1bec773cb905d1f7e\",\"license\":\"UNLICENSED\"},\"src/Libraries/LibLiFi.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { LibAsset } from \\\"./LibAsset.sol\\\";\\n\\nlibrary LibLiFi {\\n    struct SwapData {\\n        address fromToken;\\n        address toToken;\\n        address callTo;\\n        uint256 fromAmount;\\n        uint256 toAmount;\\n        bytes callData;\\n    }\\n\\n    event AssetSwapped(address fromToken, address toToken, uint256 fromAmount, uint256 toAmount);\\n\\n    function swap(SwapData calldata _swapData) internal {\\n        address fromToken = _swapData.fromToken;\\n        if (!LibAsset.isNativeAsset(fromToken) && LibAsset.getOwnBalance(fromToken) != _swapData.fromAmount) {\\n            LibAsset.transferFromERC20(_swapData.fromToken, msg.sender, address(this), _swapData.fromAmount);\\n        }\\n\\n        LibAsset.approveERC20(IERC20(fromToken), _swapData.callTo, _swapData.fromAmount);\\n        (bool success, ) = _swapData.callTo.call{ value: msg.value }(_swapData.callData);\\n        require(success, \\\"ERR_DEX_SWAP_FAILED\\\");\\n\\n        emit AssetSwapped(_swapData.fromToken, _swapData.toToken, _swapData.fromAmount, _swapData.toAmount);\\n    }\\n}\\n\",\"keccak256\":\"0xd3ee87963075094819720733fb7b9b2a0eceb56515a8e8ad8c455d411da129d1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061004a5760003560e01c80633b103f661461004f5780634f7c96b51461006b5780635a555b4e146100965780638b74a0dc146100b2578063cd561f83146100ce575b600080fd5b6100696004803603810190610064919061191f565b6100ea565b005b34801561007757600080fd5b5061008061022f565b60405161008d9190611fbb565b60405180910390f35b6100b060048036038101906100ab91906119cb565b610257565b005b6100cc60048036038101906100c7919061187b565b6103ea565b005b6100e860048036038101906100e391906117f8565b6104e8565b005b60008160600160208101906100ff919061179e565b9050600061010c826105ff565b905060005b858590508160ff1610156101625761014f86868360ff16818110610138576101376125fd565b5b905060200281019061014a919061237c565b6106a5565b808061015a906125a4565b915050610111565b50826101e0013581610173846105ff565b61017d919061249e565b146101bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101b490612184565b60405180910390fd5b6101c683610865565b85600001516040516101d89190611f8f565b60405180910390207f297f737f79597d1b7e3d5580afe2bcde4e906a2656801a5db13e5b054d4688ec87602001518860400151896060015160405161021f939291906120c6565b60405180910390a2505050505050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600081606001602081019061026c919061179e565b9050600073ffffffffffffffffffffffffffffffffffffffff16826060016020810190610299919061179e565b73ffffffffffffffffffffffffffffffffffffffff16141561030157816101e0013534146102fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f390612184565b60405180910390fd5b61037b565b600061030c826105ff565b905061031f823330866101e00135610c29565b826101e001358161032f846105ff565b610339919061249e565b14610379576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037090612184565b60405180910390fd5b505b61038482610865565b82600001516040516103969190611f8f565b60405180910390207f297f737f79597d1b7e3d5580afe2bcde4e906a2656801a5db13e5b054d4688ec8460200151856040015186606001516040516103dd939291906120c6565b60405180910390a2505050565b60006103f5836105ff565b905060005b858590508160ff16101561044b5761043886868360ff16818110610421576104206125fd565b5b9050602002810190610433919061237c565b6106a5565b8080610443906125a4565b9150506103fa565b506000610457846105ff565b905060008282111561047d57828261046f919061249e565b905061047c858583610c3b565b5b876000015160405161048f9190611f8f565b60405180910390207f1b980b311827ee4e1b39828673f89faa4c6f2c6750df9d42e4bfdcfc1988010e89602001518a604001518b606001516040516104d6939291906120c6565b60405180910390a25050505050505050565b6104f183610c68565b1561053d57803414610538576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052f906121e4565b60405180910390fd5b61058d565b60003414610580576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057790612104565b60405180910390fd5b61058c83333084610c29565b5b610598838383610c3b565b83600001516040516105aa9190611f8f565b60405180910390207f1b980b311827ee4e1b39828673f89faa4c6f2c6750df9d42e4bfdcfc1988010e8560200151866040015187606001516040516105f1939291906120c6565b60405180910390a250505050565b600061060a82610c68565b61069c578173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016106479190611fbb565b60206040518083038186803b15801561065f57600080fd5b505afa158015610673573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106979190611a71565b61069e565b475b9050919050565b60008160000160208101906106ba919061179e565b90506106c581610c68565b1580156106de575081606001356106db826105ff565b14155b15610706576107058260000160208101906106f9919061179e565b33308560600135610c29565b5b6107278183604001602081019061071d919061179e565b8460600135610ca0565b600082604001602081019061073c919061179e565b73ffffffffffffffffffffffffffffffffffffffff1634848060a001906107639190612319565b604051610771929190611f5f565b60006040518083038185875af1925050503d80600081146107ae576040519150601f19603f3d011682016040523d82523d6000602084013e6107b3565b606091505b50509050806107f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ee90612164565b60405180910390fd5b7f4ac5df40d910feab74f02c4430568f99e711257906dd0df11643df22f2ee3cf683600001602081019061082b919061179e565b84602001602081019061083e919061179e565b856060013586608001356040516108589493929190612036565b60405180910390a1505050565b600081606001602081019061087a919061179e565b90506108ac817f0000000000000000000000000000000000000000000000000000000000000000846101e00135610ca0565b60006108c98360600160208101906108c4919061179e565b610c68565b6108d45760006108d6565b345b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166363405b9383604051806101800160405280886000016020810190610936919061179e565b73ffffffffffffffffffffffffffffffffffffffff168152602001886020016020810190610964919061179e565b73ffffffffffffffffffffffffffffffffffffffff168152602001886040016020810190610992919061179e565b73ffffffffffffffffffffffffffffffffffffffff1681526020018860600160208101906109c0919061179e565b73ffffffffffffffffffffffffffffffffffffffff1681526020018860800160208101906109ee919061179e565b73ffffffffffffffffffffffffffffffffffffffff1681526020018860a0016020810190610a1c919061179e565b73ffffffffffffffffffffffffffffffffffffffff1681526020018860c0016020810190610a4a919061179e565b73ffffffffffffffffffffffffffffffffffffffff1681526020018860e0016020810190610a78919061179e565b73ffffffffffffffffffffffffffffffffffffffff168152602001886101000135815260200188610120013581526020018861014001358152602001886101600135815250876101e0013588610200013589806101800190610ada9190612319565b8b806101a00190610aeb9190612319565b8d806101c00190610afc9190612319565b6040518b63ffffffff1660e01b8152600401610b2099989796959493929190612224565b6101e0604051808303818588803b158015610b3a57600080fd5b505af1158015610b4e573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610b739190611a43565b9050806101200151816040015173ffffffffffffffffffffffffffffffffffffffff16826020015173ffffffffffffffffffffffffffffffffffffffff167f8d5f5d7daa8f1fdc3c84ab87f8063ca0c15762ef9f1d11fe374c969daeb750f3843389806101800190610be59190612319565b8b806101a00190610bf69190612319565b8d806101c00190610c079190612319565b604051610c1b9897969594939291906122a6565b60405180910390a450505050565b610c3584848484610d6a565b50505050565b610c4483610c68565b610c5857610c53838383610df3565b610c63565b610c628282610e03565b5b505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b610ca983610c68565b15610cb357610d65565b60008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401610cf0929190611fd6565b60206040518083038186803b158015610d0857600080fd5b505afa158015610d1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d409190611a71565b90506000811115610d5857610d5784846000610eb4565b5b610d63848484611012565b505b505050565b610ded846323b872dd60e01b858585604051602401610d8b93929190611fff565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611133565b50505050565b610dfe8383836111fa565b505050565b60008273ffffffffffffffffffffffffffffffffffffffff1682604051610e2990611fa6565b60006040518083038185875af1925050503d8060008114610e66576040519150601f19603f3d011682016040523d82523d6000602084013e610e6b565b606091505b5050905080610eaf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea690612124565b60405180910390fd5b505050565b6000811480610f4d575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401610efb929190611fd6565b60206040518083038186803b158015610f1357600080fd5b505afa158015610f27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4b9190611a71565b145b610f8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8390612204565b60405180910390fd5b61100d8363095ea7b360e01b8484604051602401610fab92919061207b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611133565b505050565b6000818473ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30866040518363ffffffff1660e01b8152600401611050929190611fd6565b60206040518083038186803b15801561106857600080fd5b505afa15801561107c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a09190611a71565b6110aa9190612448565b905061112d8463095ea7b360e01b85846040516024016110cb92919061207b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611133565b50505050565b6000611195826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166112809092919063ffffffff16565b90506000815111156111f557808060200190518101906111b591906117cb565b6111f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111eb906121c4565b60405180910390fd5b5b505050565b61127b8363a9059cbb60e01b848460405160240161121992919061207b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611133565b505050565b606061128f8484600085611298565b90509392505050565b6060824710156112dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d490612144565b60405180910390fd5b6112e6856113ac565b611325576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131c906121a4565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161134e9190611f78565b60006040518083038185875af1925050503d806000811461138b576040519150601f19603f3d011682016040523d82523d6000602084013e611390565b606091505b50915091506113a08282866113bf565b92505050949350505050565b600080823b905060008111915050919050565b606083156113cf5782905061141f565b6000835111156113e25782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141691906120a4565b60405180910390fd5b9392505050565b6000611439611434846123c9565b6123a4565b90508281526020810184848401111561145557611454612688565b5b611460848285612531565b509392505050565b6000813590506114778161288e565b92915050565b60008151905061148c8161288e565b92915050565b60008083601f8401126114a8576114a7612660565b5b8235905067ffffffffffffffff8111156114c5576114c461265b565b5b6020830191508360208202830111156114e1576114e061267e565b5b9250929050565b6000815190506114f7816128a5565b92915050565b60008151905061150c816128bc565b92915050565b600082601f83011261152757611526612660565b5b8135611537848260208601611426565b91505092915050565b6000608082840312156115565761155561266f565b5b61156060806123a4565b9050600082013567ffffffffffffffff8111156115805761157f612679565b5b61158c84828501611512565b600083015250602082013567ffffffffffffffff8111156115b0576115af612679565b5b6115bc84828501611512565b60208301525060406115d084828501611468565b60408301525060606115e484828501611774565b60608301525092915050565b600061022082840312156116075761160661266a565b5b81905092915050565b60006101e082840312156116275761162661266f565b5b6116326101e06123a4565b905060006116428482850161147d565b60008301525060206116568482850161147d565b602083015250604061166a8482850161147d565b604083015250606061167e8482850161147d565b60608301525060806116928482850161147d565b60808301525060a06116a68482850161147d565b60a08301525060c06116ba8482850161147d565b60c08301525060e06116ce8482850161147d565b60e0830152506101006116e3848285016114fd565b610100830152506101206116f9848285016114fd565b6101208301525061014061170f84828501611789565b6101408301525061016061172584828501611789565b6101608301525061018061173b84828501611789565b610180830152506101a061175184828501611789565b6101a0830152506101c061176784828501611789565b6101c08301525092915050565b600081359050611783816128d3565b92915050565b600081519050611798816128d3565b92915050565b6000602082840312156117b4576117b3612692565b5b60006117c284828501611468565b91505092915050565b6000602082840312156117e1576117e0612692565b5b60006117ef848285016114e8565b91505092915050565b6000806000806080858703121561181257611811612692565b5b600085013567ffffffffffffffff8111156118305761182f61268d565b5b61183c87828801611540565b945050602061184d87828801611468565b935050604061185e87828801611468565b925050606061186f87828801611774565b91505092959194509250565b60008060008060006080868803121561189757611896612692565b5b600086013567ffffffffffffffff8111156118b5576118b461268d565b5b6118c188828901611540565b955050602086013567ffffffffffffffff8111156118e2576118e161268d565b5b6118ee88828901611492565b9450945050604061190188828901611468565b925050606061191288828901611468565b9150509295509295909350565b6000806000806060858703121561193957611938612692565b5b600085013567ffffffffffffffff8111156119575761195661268d565b5b61196387828801611540565b945050602085013567ffffffffffffffff8111156119845761198361268d565b5b61199087828801611492565b9350935050604085013567ffffffffffffffff8111156119b3576119b261268d565b5b6119bf878288016115f0565b91505092959194509250565b600080604083850312156119e2576119e1612692565b5b600083013567ffffffffffffffff811115611a00576119ff61268d565b5b611a0c85828601611540565b925050602083013567ffffffffffffffff811115611a2d57611a2c61268d565b5b611a39858286016115f0565b9150509250929050565b60006101e08284031215611a5a57611a59612692565b5b6000611a6884828501611610565b91505092915050565b600060208284031215611a8757611a86612692565b5b6000611a9584828501611789565b91505092915050565b611aa7816124d2565b82525050565b611ab6816124d2565b82525050565b611ac5816124f0565b82525050565b6000611ad78385612410565b9350611ae4838584612531565b611aed83612697565b840190509392505050565b6000611b048385612421565b9350611b11838584612531565b82840190509392505050565b6000611b28826123fa565b611b328185612421565b9350611b42818560208601612540565b80840191505092915050565b6000611b5982612405565b611b63818561242c565b9350611b73818560208601612540565b611b7c81612697565b840191505092915050565b6000611b9282612405565b611b9c818561243d565b9350611bac818560208601612540565b80840191505092915050565b6000611bc5600c8361242c565b9150611bd0826126a8565b602082019050919050565b6000611be860088361242c565b9150611bf3826126d1565b602082019050919050565b6000611c0b60268361242c565b9150611c16826126fa565b604082019050919050565b6000611c2e60138361242c565b9150611c3982612749565b602082019050919050565b6000611c5160128361242c565b9150611c5c82612772565b602082019050919050565b6000611c74600083612421565b9150611c7f8261279b565b600082019050919050565b6000611c97601d8361242c565b9150611ca28261279e565b602082019050919050565b6000611cba602a8361242c565b9150611cc5826127c7565b604082019050919050565b6000611cdd60128361242c565b9150611ce882612816565b602082019050919050565b6000611d0060368361242c565b9150611d0b8261283f565b604082019050919050565b61018082016000820151611d2d6000850182611a9e565b506020820151611d406020850182611a9e565b506040820151611d536040850182611a9e565b506060820151611d666060850182611a9e565b506080820151611d796080850182611a9e565b5060a0820151611d8c60a0850182611a9e565b5060c0820151611d9f60c0850182611a9e565b5060e0820151611db260e0850182611a9e565b50610100820151611dc7610100850182611f41565b50610120820151611ddc610120850182611f41565b50610140820151611df1610140850182611abc565b50610160820151611e06610160850182611abc565b50505050565b6101e082016000820151611e236000850182611a9e565b506020820151611e366020850182611a9e565b506040820151611e496040850182611a9e565b506060820151611e5c6060850182611a9e565b506080820151611e6f6080850182611a9e565b5060a0820151611e8260a0850182611a9e565b5060c0820151611e9560c0850182611a9e565b5060e0820151611ea860e0850182611a9e565b50610100820151611ebd610100850182611abc565b50610120820151611ed2610120850182611abc565b50610140820151611ee7610140850182611f41565b50610160820151611efc610160850182611f41565b50610180820151611f11610180850182611f41565b506101a0820151611f266101a0850182611f41565b506101c0820151611f3b6101c0850182611f41565b50505050565b611f4a8161251a565b82525050565b611f598161251a565b82525050565b6000611f6c828486611af8565b91508190509392505050565b6000611f848284611b1d565b915081905092915050565b6000611f9b8284611b87565b915081905092915050565b6000611fb182611c67565b9150819050919050565b6000602082019050611fd06000830184611aad565b92915050565b6000604082019050611feb6000830185611aad565b611ff86020830184611aad565b9392505050565b60006060820190506120146000830186611aad565b6120216020830185611aad565b61202e6040830184611f50565b949350505050565b600060808201905061204b6000830187611aad565b6120586020830186611aad565b6120656040830185611f50565b6120726060830184611f50565b95945050505050565b60006040820190506120906000830185611aad565b61209d6020830184611f50565b9392505050565b600060208201905081810360008301526120be8184611b4e565b905092915050565b600060608201905081810360008301526120e08186611b4e565b90506120ef6020830185611aad565b6120fc6040830184611f50565b949350505050565b6000602082019050818103600083015261211d81611bb8565b9050919050565b6000602082019050818103600083015261213d81611bdb565b9050919050565b6000602082019050818103600083015261215d81611bfe565b9050919050565b6000602082019050818103600083015261217d81611c21565b9050919050565b6000602082019050818103600083015261219d81611c44565b9050919050565b600060208201905081810360008301526121bd81611c8a565b9050919050565b600060208201905081810360008301526121dd81611cad565b9050919050565b600060208201905081810360008301526121fd81611cd0565b9050919050565b6000602082019050818103600083015261221d81611cf3565b9050919050565b60006102208201905061223a600083018c611d16565b61224861018083018b611f50565b6122566101a083018a611f50565b8181036101c083015261226a81888a611acb565b90508181036101e0830152612280818688611acb565b9050818103610200830152612296818486611acb565b90509a9950505050505050505050565b6000610260820190506122bc600083018b611e0c565b6122ca6101e083018a611aad565b8181036102008301526122de81888a611acb565b90508181036102208301526122f4818688611acb565b905081810361024083015261230a818486611acb565b90509998505050505050505050565b6000808335600160200384360303811261233657612335612674565b5b80840192508235915067ffffffffffffffff82111561235857612357612665565b5b60208301925060018202360383131561237457612373612683565b5b509250929050565b60008235600160c00383360303811261239857612397612674565b5b80830191505092915050565b60006123ae6123bf565b90506123ba8282612573565b919050565b6000604051905090565b600067ffffffffffffffff8211156123e4576123e361262c565b5b6123ed82612697565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006124538261251a565b915061245e8361251a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612493576124926125ce565b5b828201905092915050565b60006124a98261251a565b91506124b48361251a565b9250828210156124c7576124c66125ce565b5b828203905092915050565b60006124dd826124fa565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b8381101561255e578082015181840152602081019050612543565b8381111561256d576000848401525b50505050565b61257c82612697565b810181811067ffffffffffffffff8211171561259b5761259a61262c565b5b80604052505050565b60006125af82612524565b915060ff8214156125c3576125c26125ce565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4554485f574954485f4552430000000000000000000000000000000000000000600082015250565b7f23544e413a303238000000000000000000000000000000000000000000000000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f4552525f4445585f535741505f4641494c454400000000000000000000000000600082015250565b7f4552525f494e56414c49445f414d4f554e540000000000000000000000000000600082015250565b50565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f494e56414c49445f4554485f414d4f554e540000000000000000000000000000600082015250565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b612897816124d2565b81146128a257600080fd5b50565b6128ae816124e4565b81146128b957600080fd5b50565b6128c5816124f0565b81146128d057600080fd5b50565b6128dc8161251a565b81146128e757600080fd5b5056fea26469706673582212205da0d78e2429c0204c58b78d5ab57e2ce0e85226049825d307e084333983a8e564736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "startBridgeTokensViaNXTP((string,string,address,uint256),(address,address,address,address,address,address,address,address,uint256,uint256,bytes32,bytes32,bytes,bytes,bytes,uint256,uint256))": {
        "params": {
          "_lifiData": "data used purely for tracking and analytics",
          "_nxtpData": "data needed to complete an NXTP cross-chain transaction"
        }
      },
      "swapAndStartBridgeTokensViaNXTP((string,string,address,uint256),(address,address,address,uint256,uint256,bytes)[],(address,address,address,address,address,address,address,address,uint256,uint256,bytes32,bytes32,bytes,bytes,bytes,uint256,uint256))": {
        "params": {
          "_lifiData": "data used purely for tracking and analytics",
          "_nxtpData": "data needed to complete an NXTP cross-chain transaction",
          "_swapData": "array of data needed for swaps"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "completeBridgeTokensViaNXTP((string,string,address,uint256),address,address,uint256)": {
        "notice": "This function completes a cross-chain transaction using the NXTP protocol."
      },
      "getNXTPTransactionManager()": {
        "notice": "show the NXTP transaction manager contract address"
      },
      "startBridgeTokensViaNXTP((string,string,address,uint256),(address,address,address,address,address,address,address,address,uint256,uint256,bytes32,bytes32,bytes,bytes,bytes,uint256,uint256))": {
        "notice": "This function starts a cross-chain transaction using the NXTP protocol"
      },
      "swapAndStartBridgeTokensViaNXTP((string,string,address,uint256),(address,address,address,uint256,uint256,bytes)[],(address,address,address,address,address,address,address,address,uint256,uint256,bytes32,bytes32,bytes,bytes,bytes,uint256,uint256))": {
        "notice": "This function performs a swap or multiple swaps and then starts a cross-chain transaction         using the NXTP protocol."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
